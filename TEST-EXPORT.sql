PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table: COURSEWORKRESULT
DROP TABLE IF EXISTS COURSEWORKRESULT;
CREATE TABLE COURSEWORKRESULT (
	Mark_Achieved INTEGER (10),
	STUDENT_ID INTEGER (10) REFERENCES STUDENT (STUDENT_ID),
	SUBJECT_ID INTEGER (10) REFERENCES SUBJECT (SUBJECT_ID)
);

-- Table: SUBJECT
DROP TABLE IF EXISTS SUBJECT;
CREATE TABLE SUBJECT (
	SUBJECT_ID INTEGER (10) PRIMARY KEY NOT NULL,
	Name VARCHAR (20),
	Description VARCHAR (255),
	Semester INTEGER (2)
);

-- Table: COURSEWORK
DROP TABLE IF EXISTS COURSEWORK;
CREATE TABLE COURSEWORK (
	COURSEWORK_ID INTEGER (10) PRIMARY KEY NOT NULL,
	SUBJECT_ID INTEGER (10) REFERENCES SUBJECT (SUBJECT_ID),
	Max_Mark INTEGER (10),
	STUDENT_ID INTEGER (10) REFERENCES STUDENT (STUDENT_ID)
);

-- Table: EXAM
DROP TABLE IF EXISTS EXAM;
CREATE TABLE EXAM (
	EXAM_ID INTEGER (10) PRIMARY KEY NOT NULL,
	Total_Mark INTEGER (10),
	Resit INTEGER (10),
	LECTURER_ID INTEGER (10) REFERENCES LECTURER (LECTURER_ID),
	STUDENT_ID INTEGER (10) REFERENCES STUDENT (STUDENT_ID),
	SUBJECT_ID INTEGER (10) REFERENCES SUBJECT (SUBJECT_ID)
);

-- Table: EXAMRESULT
DROP TABLE IF EXISTS EXAMRESULT;
CREATE TABLE EXAMRESULT (
	Mark_Achieved INTEGER (10),
	STUDENT_ID INTEGER (10) REFERENCES STUDENT (STUDENT_ID),
	EXAM_ID INTEGER (10) REFERENCES EXAM (EXAM_ID)
);

-- Table: QUESTION
DROP TABLE IF EXISTS QUESTION;
CREATE TABLE QUESTION (
	QUESTION_ID INTEGER (10) PRIMARY KEY NOT NULL,
	Max_Mark INTEGER (10),
	Author VARCHAR (50),
	EXAM_ID INTEGER (10) REFERENCES EXAM (EXAN_ID),
	LECTURER_ID INTEGER (10) REFERENCES LECTURER (LECTURER_ID)
);

-- Table: STUDENT
DROP TABLE IF EXISTS STUDENT;
CREATE TABLE STUDENT (
	STUDENT_ID INTEGER (10) PRIMARY KEY NOT NULL,
	First_Name VARCHAR (20),
	Last_Name VARCHAR (20),
	Year INTEGER (2),
	SUBJECT_ID INTEGER (10) REFERENCES SUBJECT (SUBJECT_ID)
);

-- Table: LECTURER
DROP TABLE IF EXISTS LECTURER;
CREATE TABLE LECTURER (
	LECTURER_ID INTEGER (10) PRIMARY KEY NOT NULL,
	Title VARCHAR (10),
	First_Name VARCHAR (20),
	Last_Name VARCHAR (20),
	SUBJECT_ID INTEGER (10) REFERENCES SUBJECT (SUBJECT_ID),
	COURSEWORK_ID INTEGER (10) REFERENCES COURSEWORK (COURSEWORK_ID)
);

COMMIT TRANSACTION;
PRAGMA foreign_keys = on;